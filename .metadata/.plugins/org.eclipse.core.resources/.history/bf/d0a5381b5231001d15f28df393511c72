package co.grandcircus.Maze.controller;

import java.util.ArrayList;
import java.util.Arrays;
import java.util.LinkedList;
import java.util.List;

import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.stereotype.Controller;
import org.springframework.web.bind.annotation.PostMapping;
import org.springframework.web.bind.annotation.RequestMapping;
import org.springframework.web.bind.annotation.RequestParam;
import org.springframework.web.servlet.ModelAndView;

import co.grandcircus.Maze.IconSearch.IconSearchService;
import co.grandcircus.Maze.models.Coordinate;
import co.grandcircus.Maze.models.Maze;
import co.grandcircus.Maze.models.ShortestPathChecker;
import co.grandcircus.Maze.repository.MazeRepository;

@Controller
public class MazeDisplayController {
	
	@Autowired
	private MazeRepository repo;
	
	@Autowired
	private IconSearchService apiService;

	@PostMapping("/displaymaze")
	public ModelAndView displayMaze(@RequestParam String title, @RequestParam(required=false) String username, @RequestParam(required=false) boolean loggedIn) {
		
		Maze maze = repo.findByTitle(title);
		ModelAndView modelAndView = new ModelAndView("displaymaze");
		
		 StringBuilder result = new StringBuilder(maze.getWidth() * (maze.getHeight() + 1));
	        for (int row = 0; row < maze.getHeight(); row++) {
	            for (int col = 0; col < maze.getWidth(); col++) {
	                if (maze.getMazeGrid()[row][col] == 0) { //Based on final variables, 0 generates a wall 
	                    result.append("#  ");
	                } else if (maze.getMazeGrid()[row][col] == 1) { //Based on final variables, 1 generates open space
	                    result.append("0  ");
	                } else if (maze.getMazeGrid()[row][col] == 2) { //Based on final variables, 2 generates maze start point
	                    result.append("S  ");
	                } else if (maze.getMazeGrid()[row][col] == 3) { //Based on final variables, 3 generates maze end point
	                    result.append("E  ");
	                } else {
	                    result.append('.'); //Everything else is the path
	                }
	            }
	            result.append("<br>");
	        }
	       
	        modelAndView.addObject("symbolMaze", result.toString());
	        modelAndView.addObject("title", maze.getTitle());
	        modelAndView.addObject("username", username);
	        modelAndView.addObject("loggedIn", loggedIn);
	        
	        modelAndView.addObject("picture", apiService.getIconObjects("Blank").getObjects().get(1).getAssets().get(2).getUrl());
	        
	        return modelAndView;
	}
	
	@PostMapping("/solvemaze")
	public ModelAndView solveMaze(@RequestParam String title, @RequestParam(required=false) String username, @RequestParam(required=false) boolean loggedIn) {
		
		Maze maze = repo.findByTitle(title);
		ModelAndView modelAndView = new ModelAndView("solvemaze");
		
		//Generates new boolean[][] equal in size to the Maze's mazegrid, in order to set the starting state visitedCoordinates property of the maze (not included in constructor)
		boolean[][] visitedCoordinates = new boolean[maze.getHeight()][maze.getWidth()];
		
		for (int i = 0; i < visitedCoordinates.length; i++) {
            Arrays.fill(visitedCoordinates[i], false);
		}
		
		maze.setVisitedCoordinates(visitedCoordinates);
		
		final int[][] POSSIBLE_DIRECTIONS = { { 0, 1 }, { 1, 0 }, { 0, -1 }, { -1, 0 } };
		
		//Initialize a nextToVisit LinkedList and add the starting point
        LinkedList<Coordinate> nextToVisit = new LinkedList<>();
        Coordinate startPoint = maze.getMazeStart();
        nextToVisit.add(startPoint);

        //While the nextToVisitList is populated with viable coordinates, this checks the state of them, removing each coordinate as it's evaluated 
        while (!nextToVisit.isEmpty()) {
            Coordinate cur = nextToVisit.remove();

            //if this point isn't valid or has already been explored, continue to the next point
            if (!maze.isThisValidLocation(cur.getX(), cur.getY()) || maze.isThisCellExplored(cur.getX(), cur.getY())) {
                continue;
            }
            
            //If this point is a wall, set it as visited and continue
            if (maze.isThisWall(cur.getX(), cur.getY())) {
                maze.setVisited(cur.getX(), cur.getY(), true);
                continue;
            }
            
            //If this point is the end of the maze, we backtrack to add the shortest path to the mazegrid (=4), then pass the solution to a JSP
            if (maze.isThisMazeEnd(cur.getX(), cur.getY())) {
            	 int[][] tempMaze = maze.getMazeGrid();
                 Coordinate pathCoordinate = cur;

                 while (pathCoordinate != null) {
                     tempMaze[pathCoordinate.getX()][pathCoordinate.getY()] = 4;
                     pathCoordinate = pathCoordinate.getParentCoordinate();
                 }                
                        
                StringBuilder result = new StringBuilder(maze.getWidth() * (maze.getHeight() + 1));
     	        for (int row = 0; row < maze.getHeight(); row++) {
     	            for (int col = 0; col < maze.getWidth(); col++) {
     	                if (tempMaze[row][col] == 0) { //Based on final variables, 0 generates a wall 
     	                    result.append("#  ");
     	                } else if (tempMaze[row][col] == 1) { //Based on final variables, 1 generates open space
     	                    result.append("0  ");
     	                } else if (tempMaze[row][col] == 2) { //Based on final variables, 2 generates maze start point
     	                    result.append("S  ");
     	                } else if (tempMaze[row][col] == 3) { //Based on final variables, 3 generates maze end point
     	                    result.append("E  ");
     	                } else {
     	                    result.append(".  "); //Everything else is the path
     	                }
     	            }
     	            result.append("<br>");
     	        }
                
     	        modelAndView.addObject("symbolMaze", result.toString());
     	        modelAndView.addObject("title", title);
     	        modelAndView.addObject("username", username);
     	       	modelAndView.addObject("loggedIn", loggedIn);
     	        return modelAndView;                    
            }

            //Adds all possible direction coordinates from the current coordinate (cur) via enhanced for loop. Also uses the Coordinate 
            //constructor with parentCoordinate to log the current coordinate's parent. 
            for (int[] direction : POSSIBLE_DIRECTIONS) {
                Coordinate coordinate = new Coordinate(cur.getX() + direction[0], cur.getY() + direction[1], cur);
                nextToVisit.add(coordinate);
                maze.setVisited(cur.getX(), cur.getY(), true);
            }	
        }
		

        return modelAndView;
	}
}
